// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DronelinkCore
import AVFoundation
import CoreLocation
import Foundation
import JavaScriptCore
import Swift
import UIKit
import os
public protocol CameraFile {
  var channel: Swift.UInt { get }
  var name: Swift.String { get }
  var size: Swift.Int64 { get }
  var created: Foundation.Date { get }
  var metadata: Swift.String? { get }
  var coordinate: CoreLocation.CLLocationCoordinate2D? { get }
  var altitude: Swift.Double? { get }
  var orientation: DronelinkCore.Kernel.Orientation3? { get }
}
public struct DatedValue<T> {
  public let value: T
  public let date: Foundation.Date
  public init(value: T, date: Foundation.Date = Date())
}
public class DroneOffsets {
  public var droneYaw: Swift.Double
  public var droneAltitude: Swift.Double
  public var droneAltitudeReference: Swift.Double?
  public var droneAltitudeContinuity: Swift.Bool
  public var droneCoordinate: DronelinkCore.Kernel.Vector2
  public var droneCoordinateReference: CoreLocation.CLLocationCoordinate2D?
  public var cameraExposureCompensationSteps: Swift.Int
  public init(droneYaw: Swift.Double = 0.0, droneAltitude: Swift.Double = 0.0, droneCoordinate: DronelinkCore.Kernel.Vector2 = Kernel.Vector2(), cameraExposureCompensationSteps: Swift.Int = 0)
  @objc deinit
}
public protocol DronelinkDelegate {
  func onRegistered(error: Swift.String?)
  func onDroneSessionManagerAdded(manager: DronelinkCore.DroneSessionManager)
  func onMissionLoaded(executor: DronelinkCore.MissionExecutor)
  func onMissionUnloaded(executor: DronelinkCore.MissionExecutor)
  func onFuncLoaded(executor: DronelinkCore.FuncExecutor)
  func onFuncUnloaded(executor: DronelinkCore.FuncExecutor)
  func onModeLoaded(executor: DronelinkCore.ModeExecutor)
  func onModeUnloaded(executor: DronelinkCore.ModeExecutor)
}
public enum DronelinkError : Swift.Error {
  case unregistered
  case kernelUnavailable
  case kernelInvalid
  case kernelIncompatible
  case droneSerialNumberUnavailable
  public static func == (a: DronelinkCore.DronelinkError, b: DronelinkCore.DronelinkError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension Dronelink {
  public static let shared: DronelinkCore.Dronelink
  public static let KernelVersionMinimum: DronelinkCore.Version
}
@objc @_inheritsConvenienceInitializers public class Dronelink : ObjectiveC.NSObject {
  final public let locationManager: CoreLocation.CLLocationManager
  public var location: DronelinkCore.DatedValue<CoreLocation.CLLocation>?
  public var heading: DronelinkCore.DatedValue<Swift.Double>?
  public var kernelVersion: DronelinkCore.Version? {
    get
  }
  public var engaged: Swift.Bool {
    get
  }
  public var executor: Any? {
    get
  }
  public var missionExecutor: DronelinkCore.MissionExecutor? {
    get
  }
  public var funcExecutor: DronelinkCore.FuncExecutor? {
    get
  }
  public var modeExecutor: DronelinkCore.ModeExecutor? {
    get
  }
  public var droneOffsets: DronelinkCore.DroneOffsets
  public var droneSessionManagers: [DronelinkCore.DroneSessionManager] {
    get
  }
  public var targetDroneSessionManager: DronelinkCore.DroneSessionManager? {
    get
  }
  @objc override dynamic public init()
  public func add(delegate: DronelinkCore.DronelinkDelegate)
  public func remove(delegate: DronelinkCore.DronelinkDelegate)
  public func add(droneSessionManager: DronelinkCore.DroneSessionManager)
  public func enableDevelopmentServer()
  public func register(environmentKey: Swift.String, delegate: DronelinkCore.DronelinkDelegate? = nil)
  public func install(kernel: Swift.String) throws -> DronelinkCore.Version
  @discardableResult
  public func install(kernel: Foundation.URL) throws -> DronelinkCore.Version
  public var unitSystem: DronelinkCore.Kernel.UnitSystem {
    get
    set
  }
  public func format(formatter: Swift.String, value: Any?, defaultValue: Swift.String = "", extraParams: [Any]? = nil) -> Swift.String
  public func formatEnum(name: Swift.String, value: Swift.String?, defaultValue: Swift.String = "") -> Swift.String
  public func identify(device: DronelinkCore.Device)
  public func identify(user: DronelinkCore.User)
  public func identify(device: DronelinkCore.Device, user: DronelinkCore.User)
  public func announce(message: Swift.String)
  public func createAssetManifest(id: Swift.String? = nil, tags: [Swift.String]? = nil) throws -> DronelinkCore.AssetManifest
  public var statusMessages: [DronelinkCore.Kernel.Message]? {
    get
  }
  public func unload()
  public func load(mission: Swift.String, delegate: DronelinkCore.MissionExecutorDelegate? = nil, error: ((Swift.String) -> ())? = nil) throws
  public func load(id: Swift.String = UUID().uuidString, plan: Swift.String, verification: Swift.Bool = false, delegate: DronelinkCore.MissionExecutorDelegate? = nil, error: ((Swift.String) -> ())? = nil) throws
  public func unloadMission()
  public func load(id: Swift.String? = nil, _func: Swift.String, missionID: Swift.String = UUID().uuidString, modeID: Swift.String = UUID().uuidString, metadata: DronelinkCore.FuncExecutorMetadata? = nil, delegate: DronelinkCore.FuncExecutorDelegate? = nil, error: ((Swift.String) -> ())? = nil) throws
  public func unloadFunc()
  public func load(id: Swift.String = UUID().uuidString, metadata: DronelinkCore.ModeExecutorMetadata? = nil, mode: Swift.String, delegate: DronelinkCore.ModeExecutorDelegate? = nil, error: ((Swift.String) -> ())? = nil) throws
  public func unloadMode()
  @objc deinit
}
extension Dronelink : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateHeading newHeading: CoreLocation.CLHeading)
}
extension Dronelink : DronelinkCore.MissionExecutorDelegate {
  public func onMissionEstimating(executor: DronelinkCore.MissionExecutor)
  public func onMissionEstimated(executor: DronelinkCore.MissionExecutor, estimate: DronelinkCore.MissionExecutor.Estimate)
  public func onMissionEngaging(executor: DronelinkCore.MissionExecutor)
  public func onMissionEngaged(executor: DronelinkCore.MissionExecutor, engagement: DronelinkCore.Executor.Engagement)
  public func onMissionExecuted(executor: DronelinkCore.MissionExecutor, engagement: DronelinkCore.Executor.Engagement)
  public func onMissionDisengaged(executor: DronelinkCore.MissionExecutor, engagement: DronelinkCore.Executor.Engagement, reason: DronelinkCore.Kernel.Message)
}
extension Dronelink : DronelinkCore.ModeExecutorDelegate {
  public func onModeEngaging(executor: DronelinkCore.ModeExecutor)
  public func onModeEngaged(executor: DronelinkCore.ModeExecutor, engagement: DronelinkCore.Executor.Engagement)
  public func onModeExecuted(executor: DronelinkCore.ModeExecutor, engagement: DronelinkCore.Executor.Engagement)
  public func onModeDisengaged(executor: DronelinkCore.ModeExecutor, engagement: DronelinkCore.Executor.Engagement, reason: DronelinkCore.Kernel.Message)
}
public class Device {
  final public let id: Swift.String
  public init(id: Swift.String = UIDevice().identifierForVendor!.uuidString)
  public func asDict(location: CoreLocation.CLLocation? = nil) -> [Swift.String : Any]
  public static var modelIdentifier: Swift.String {
    get
  }
  public static var legacy: Swift.Bool {
    get
  }
  @objc deinit
}
public protocol ModeExecutorDelegate {
  func onModeEngaging(executor: DronelinkCore.ModeExecutor)
  func onModeEngaged(executor: DronelinkCore.ModeExecutor, engagement: DronelinkCore.Executor.Engagement)
  func onModeExecuted(executor: DronelinkCore.ModeExecutor, engagement: DronelinkCore.Executor.Engagement)
  func onModeDisengaged(executor: DronelinkCore.ModeExecutor, engagement: DronelinkCore.Executor.Engagement, reason: DronelinkCore.Kernel.Message)
}
public protocol ModeExecutorMetadata {
  func toJSON() -> Swift.String?
}
@_hasMissingDesignatedInitializers public class ModeExecutor : DronelinkCore.Executor {
  override public var id: Swift.String {
    get
  }
  final public let metadata: DronelinkCore.ModeExecutorMetadata?
  final public let descriptors: DronelinkCore.Kernel.Descriptors
  final public let userInterfaceSettings: DronelinkCore.Kernel.UserInterfaceSettings?
  public var engaging: Swift.Bool {
    get
  }
  public var engagement: DronelinkCore.Executor.Engagement? {
    get
  }
  public var engaged: Swift.Bool {
    get
  }
  public func add(delegate: DronelinkCore.ModeExecutorDelegate)
  public func remove(delegate: DronelinkCore.ModeExecutorDelegate)
  public func engage(droneSession: DronelinkCore.DroneSession, disallowed: @escaping (DronelinkCore.Kernel.Message) -> ()) throws
  override public func asDict(metadataOnly: Swift.Bool) -> [Swift.String : Any]
  @objc deinit
}
extension ModeExecutor {
  public var summaryMessage: DronelinkCore.Kernel.Message? {
    get
  }
  public var target: DronelinkCore.Kernel.GeoSpatial? {
    get
  }
  public var visibleCoordinates: [DronelinkCore.Kernel.GeoCoordinate]? {
    get
  }
}
public class AssetManifest {
  public init(kernel: Swift.String, id: Swift.String? = nil, tags: [Swift.String]? = nil)
  public func addAsset(key: Swift.String? = nil, descriptors: DronelinkCore.Kernel.Descriptors? = nil) -> Swift.Int
  public func addCameraFile(assetIndex: Swift.Int, cameraFile: DronelinkCore.CameraFile)
  public var serialized: Swift.String? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Executor {
  final public let environmentKey: Swift.String?
  public var droneTakeoffAltitudeAlternate: Swift.Double?
  public var id: Swift.String {
    get
  }
  public var unitSystem: DronelinkCore.Kernel.UnitSystem {
    get
    set
  }
  public func disengage(reason: DronelinkCore.Kernel.Message)
  public func asDict(metadataOnly: Swift.Bool) -> [Swift.String : Any]
  @objc deinit
}
extension Executor : DronelinkCore.DroneSessionDelegate {
  public func onInitialized(session: DronelinkCore.DroneSession)
  public func onLocated(session: DronelinkCore.DroneSession)
  public func onMotorsChanged(session: DronelinkCore.DroneSession, value: Swift.Bool)
  public func onCommandExecuted(session: DronelinkCore.DroneSession, command: DronelinkCore.KernelCommand)
  public func onCommandFinished(session: DronelinkCore.DroneSession, command: DronelinkCore.KernelCommand, error: Swift.Error?)
  public func onCameraFileGenerated(session: DronelinkCore.DroneSession, file: DronelinkCore.CameraFile)
}
extension Executor {
  public var executableCoordinate: DronelinkCore.Kernel.GeoCoordinate? {
    get
  }
  public func executableSerialized(complete: @escaping (Swift.String?) -> ())
  public var deviceSerialized: Swift.String? {
    get
  }
  public var droneSerialized: Swift.String? {
    get
  }
  public var engagementCount: Swift.Int {
    get
  }
  public var engagementsTimeElapsed: Swift.Double {
    get
  }
  public var executionDuration: Swift.Double {
    get
  }
  public var executingMessageGroups: [DronelinkCore.Kernel.MessageGroup] {
    get
  }
}
extension Executor {
  public class Engagement {
    final public let engaged: Foundation.Date
    final public let device: DronelinkCore.Device
    final public let user: DronelinkCore.User?
    final public let droneSession: DronelinkCore.DroneSession
    public init(device: DronelinkCore.Device, user: DronelinkCore.User?, droneSession: DronelinkCore.DroneSession, controlSession: DronelinkCore.DroneControlSession?, backgroundTask: UIKit.UIBackgroundTaskIdentifier)
    @objc deinit
  }
}
public struct Version {
  public let major: Swift.Int
  public let minor: Swift.Int
  public let patch: Swift.Int
  public var display: Swift.String {
    get
  }
  public init(major: Swift.Int, minor: Swift.Int, patch: Swift.Int)
  public init(version: Swift.String)
}
public struct RTKConfigurationRecord {
  public var enabled: Swift.Bool
  public let autoConnect: Swift.Bool
  public let serverAddress: Swift.String?
  public let port: Swift.Int?
  public let mountPoint: Swift.String?
  public let userName: Swift.String?
  public let password: Swift.String?
  public init(enabled: Swift.Bool, autoConnect: Swift.Bool, serverAddress: Swift.String?, port: Swift.Int?, mountPoint: Swift.String?, userName: Swift.String?, password: Swift.String?)
}
public enum NetworkRTKStatus : Swift.Int {
  case notSupported
  case disabled
  case connecting
  case connected
  case error
  case timeout
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct RTKState {
  public let networkRTKEnabled: Swift.Bool
  public let networkRTKConnected: Swift.Bool
  public let networkRTKStatus: DronelinkCore.NetworkRTKStatus
  public let networkServiceStateText: Swift.String
  public let configurationStatus: Swift.String
  public init(networkRTKEnabled: Swift.Bool, networkRTKConnected: Swift.Bool, networkRTKStatus: DronelinkCore.NetworkRTKStatus, networkServiceStateText: Swift.String, configurationStatus: Swift.String)
}
public protocol RTKManager {
  func addUpdateListner(key: Swift.String, closure: @escaping (DronelinkCore.RTKState) -> Swift.Void)
  func removeUpdateListner(key: Swift.String)
  var configuration: DronelinkCore.RTKConfigurationRecord? { get }
  func set(configuration: DronelinkCore.RTKConfigurationRecord)
}
public class User {
  public var id: Swift.String
  public var email: Swift.String?
  public var name: Swift.String?
  public init(id: Swift.String = UIDevice().identifierForVendor!.uuidString, email: Swift.String? = nil, name: Swift.String? = nil)
  public func asDict(location: CoreLocation.CLLocation? = nil) -> [Swift.String : Any]
  @objc deinit
}
public typealias CommandStarted = () -> ()
public typealias CommandFinished = (Swift.Error?) -> ()
public struct CommandConfig {
  public let maxAttempts: Swift.Int
  public let attemptTimeout: Foundation.TimeInterval
  public let retryDelay: Foundation.TimeInterval
  public let retryDelayExponent: Swift.Double
  public init(maxAttempts: Swift.Int = 3, attemptTimeout: Foundation.TimeInterval = 3.0, retryDelay: Foundation.TimeInterval = 1.0, retryDelayExponent: Swift.Double = 2.0)
}
public class Command {
  public var status: DronelinkCore.Kernel.CommandExecutionStatus {
    get
  }
  public var completed: Swift.Bool {
    get
  }
  final public let id: Swift.String
  public init(id: Swift.String, name: Swift.String, execute: @escaping (@escaping DronelinkCore.CommandFinished) -> Swift.Error?, finished: @escaping DronelinkCore.CommandFinished, config: DronelinkCore.CommandConfig)
  @objc deinit
}
extension Command {
  public static func conditionallyExecute(_ condition: Swift.Bool, error: Swift.Error? = nil, finished: (Swift.Error?) -> (), execute: () -> Swift.Void)
}
public class CommandQueue {
  public init()
  public func removeAll()
  public func add(command: DronelinkCore.Command) throws
  public func process()
  public func fail()
  @objc deinit
}
public class MultiChannelCommandQueue {
  public init()
  public func removeAll()
  public func add(channel: Swift.UInt, command: DronelinkCore.Command) throws
  public func process()
  public func fail(channel: Swift.UInt)
  @objc deinit
}
public protocol DroneSessionManagerDelegate {
  func onOpened(session: DronelinkCore.DroneSession)
  func onClosed(session: DronelinkCore.DroneSession)
}
public protocol DroneSessionManager {
  func add(delegate: DronelinkCore.DroneSessionManagerDelegate)
  func remove(delegate: DronelinkCore.DroneSessionManagerDelegate)
  var session: DronelinkCore.DroneSession? { get }
  var statusMessages: [DronelinkCore.Kernel.Message]? { get }
}
public protocol DroneSessionDelegate {
  func onInitialized(session: DronelinkCore.DroneSession)
  func onLocated(session: DronelinkCore.DroneSession)
  func onMotorsChanged(session: DronelinkCore.DroneSession, value: Swift.Bool)
  func onCommandExecuted(session: DronelinkCore.DroneSession, command: DronelinkCore.KernelCommand)
  func onCommandFinished(session: DronelinkCore.DroneSession, command: DronelinkCore.KernelCommand, error: Swift.Error?)
  func onCameraFileGenerated(session: DronelinkCore.DroneSession, file: DronelinkCore.CameraFile)
}
public enum DroneSessionError : Swift.Error {
  case commandTypeUnhandled
  public static func == (a: DronelinkCore.DroneSessionError, b: DronelinkCore.DroneSessionError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol DroneSession {
  var drone: DronelinkCore.DroneAdapter { get }
  var state: DronelinkCore.DatedValue<DronelinkCore.DroneStateAdapter>? { get }
  var opened: Foundation.Date { get }
  var id: Swift.String { get }
  var manufacturer: Swift.String { get }
  var serialNumber: Swift.String? { get }
  var name: Swift.String? { get }
  var model: Swift.String? { get }
  var firmwarePackageVersion: Swift.String? { get }
  var initialized: Swift.Bool { get }
  var located: Swift.Bool { get }
  var telemetryDelayed: Swift.Bool { get }
  var disengageReason: DronelinkCore.Kernel.Message? { get }
  func identify(id: Swift.String)
  func add(delegate: DronelinkCore.DroneSessionDelegate)
  func remove(delegate: DronelinkCore.DroneSessionDelegate)
  func add(command: DronelinkCore.KernelCommand) throws
  func removeCommands()
  func createControlSession() -> DronelinkCore.DroneControlSession
  func remoteControllerState(channel: Swift.UInt) -> DronelinkCore.DatedValue<DronelinkCore.RemoteControllerStateAdapter>?
  func cameraState(channel: Swift.UInt) -> DronelinkCore.DatedValue<DronelinkCore.CameraStateAdapter>?
  func gimbalState(channel: Swift.UInt) -> DronelinkCore.DatedValue<DronelinkCore.GimbalStateAdapter>?
  func resetPayloads()
  func close()
}
public protocol DroneControlSession {
  var disengageReason: DronelinkCore.Kernel.Message? { get }
  func activate() -> Swift.Bool?
  func deactivate()
}
extension DroneSession {
  public var asDict: [Swift.String : Any] {
    get
  }
}
public protocol DroneAdapter {
  var remoteControllers: [DronelinkCore.RemoteControllerAdapter]? { get }
  var cameras: [DronelinkCore.CameraAdapter]? { get }
  var gimbals: [DronelinkCore.GimbalAdapter]? { get }
  func remoteController(channel: Swift.UInt) -> DronelinkCore.RemoteControllerAdapter?
  func camera(channel: Swift.UInt) -> DronelinkCore.CameraAdapter?
  func gimbal(channel: Swift.UInt) -> DronelinkCore.GimbalAdapter?
  func send(velocityCommand: DronelinkCore.Kernel.VelocityDroneCommand?)
  func send(remoteControllerSticksCommand: DronelinkCore.Kernel.RemoteControllerSticksDroneCommand?)
  func startGoHome(finished: DronelinkCore.CommandFinished?)
  func startLanding(finished: DronelinkCore.CommandFinished?)
}
public protocol DroneStateAdapter {
  var statusMessages: [DronelinkCore.Kernel.Message]? { get }
  var mode: Swift.String? { get }
  var isFlying: Swift.Bool { get }
  var location: CoreLocation.CLLocation? { get }
  var homeLocation: CoreLocation.CLLocation? { get }
  var lastKnownGroundLocation: CoreLocation.CLLocation? { get }
  var takeoffLocation: CoreLocation.CLLocation? { get }
  var takeoffAltitude: Swift.Double? { get }
  var course: Swift.Double { get }
  var horizontalSpeed: Swift.Double { get }
  var verticalSpeed: Swift.Double { get }
  var altitude: Swift.Double { get }
  var batteryPercent: Swift.Double? { get }
  var lowBatteryThreshold: Swift.Double? { get }
  var obstacleDistance: Swift.Double? { get }
  var orientation: DronelinkCore.Kernel.Orientation3 { get }
  var gpsSatellites: Swift.Int? { get }
  var gpsSignalStrength: Swift.Double? { get }
  var downlinkSignalStrength: Swift.Double? { get }
  var uplinkSignalStrength: Swift.Double? { get }
}
public protocol CameraAdapter {
  var model: Swift.String? { get }
  var index: Swift.UInt { get }
}
public protocol CameraStateAdapter {
  var isBusy: Swift.Bool { get }
  var isCapturing: Swift.Bool { get }
  var isCapturingPhotoInterval: Swift.Bool { get }
  var isCapturingVideo: Swift.Bool { get }
  var isCapturingContinuous: Swift.Bool { get }
  var isSDCardInserted: Swift.Bool { get }
  var storageLocation: DronelinkCore.Kernel.CameraStorageLocation { get }
  var mode: DronelinkCore.Kernel.CameraMode { get }
  var photoMode: DronelinkCore.Kernel.CameraPhotoMode? { get }
  var photoInterval: Swift.Int? { get }
  var burstCount: DronelinkCore.Kernel.CameraBurstCount? { get }
  var aebCount: DronelinkCore.Kernel.CameraAEBCount? { get }
  var currentVideoTime: Swift.Double? { get }
  var exposureCompensation: DronelinkCore.Kernel.CameraExposureCompensation { get }
  var iso: DronelinkCore.Kernel.CameraISO { get }
  var shutterSpeed: DronelinkCore.Kernel.CameraShutterSpeed { get }
  var aperture: DronelinkCore.Kernel.CameraAperture { get }
  var whiteBalancePreset: DronelinkCore.Kernel.CameraWhiteBalancePreset { get }
  var lensDetails: Swift.String? { get }
}
public protocol GimbalAdapter {
  var index: Swift.UInt { get }
  func send(velocityCommand: DronelinkCore.Kernel.VelocityGimbalCommand, mode: DronelinkCore.Kernel.GimbalMode)
  func reset()
  func fineTune(roll: Swift.Double)
}
public protocol GimbalStateAdapter {
  var mode: DronelinkCore.Kernel.GimbalMode { get }
  var orientation: DronelinkCore.Kernel.Orientation3 { get }
}
public protocol RemoteControllerAdapter {
  var index: Swift.UInt { get }
}
public protocol RemoteControllerStateAdapter {
  var leftStick: DronelinkCore.Kernel.RemoteControllerStick { get }
  var leftWheel: DronelinkCore.Kernel.RemoteControllerWheel { get }
  var rightStick: DronelinkCore.Kernel.RemoteControllerStick { get }
  var pauseButton: DronelinkCore.Kernel.RemoteControllerButton { get }
  var c1Button: DronelinkCore.Kernel.RemoteControllerButton { get }
  var c2Button: DronelinkCore.Kernel.RemoteControllerButton { get }
}
public protocol FuncExecutorDelegate {
  func onFuncInputsChanged(executor: DronelinkCore.FuncExecutor)
  func onFuncExecuted(executor: DronelinkCore.FuncExecutor)
}
public protocol FuncExecutorMetadata {
  func toJSON() -> Swift.String?
}
@_hasMissingDesignatedInitializers public class FuncExecutor {
  final public let environmentKey: Swift.String?
  final public let metadata: DronelinkCore.FuncExecutorMetadata?
  final public let missionID: Swift.String
  final public let modeID: Swift.String
  public var id: Swift.String {
    get
  }
  public var descriptors: DronelinkCore.Kernel.Descriptors {
    get
  }
  public var introImageUrl: Swift.String? {
    get
  }
  public var dynamicInputs: Swift.String? {
    get
  }
  public var userInterfaceSettings: DronelinkCore.Kernel.UserInterfaceSettings? {
    get
  }
  public func add(delegate: DronelinkCore.FuncExecutorDelegate)
  public func remove(delegate: DronelinkCore.FuncExecutorDelegate)
  public var unitSystem: DronelinkCore.Kernel.UnitSystem {
    get
    set
  }
  public var urls: [Foundation.URL]? {
    get
  }
  public func input(index: Swift.Int) -> DronelinkCore.Kernel.FuncInput?
  public var inputCount: Swift.Int {
    get
  }
  public func execute(droneSession: DronelinkCore.DroneSession?, error: @escaping (Swift.String) -> ())
  public func readValue(inputIndex: Swift.Int, variableValueIndex: Swift.Int? = nil, formatted: Swift.Bool = false) -> Any?
  public func readValueNumberMeasurementTypeDisplay(index: Swift.Int) -> Swift.String?
  public func writeValue(index: Swift.Int, value: Any?)
  public func clearValue(index: Swift.Int, arrayFull: Swift.Bool = false, arrayIndex: Swift.Int? = nil)
  public func addNextDynamicInput(droneSession: DronelinkCore.DroneSession?, error: @escaping (Swift.String) -> ())
  public func removeLastDynamicInput()
  public func addCachedInputs(funcExecutor: DronelinkCore.FuncExecutor)
  @objc deinit
}
extension FuncExecutor {
  public var executableType: Swift.String? {
    get
  }
  public var executableDescriptors: DronelinkCore.Kernel.Descriptors? {
    get
  }
  public var executableCoordinate: DronelinkCore.Kernel.GeoCoordinate? {
    get
  }
  public var executableSerialized: Swift.String? {
    get
  }
  public var funcSerialized: Swift.String? {
    get
  }
}
public class MulticastDelegate<T> {
  public init()
  public func add(_ delegate: T)
  public func remove(_ delegateToRemove: T)
  public func invoke(_ invocation: (T) -> Swift.Void)
  @objc deinit
}
public protocol MissionExecutorDelegate {
  func onMissionEstimating(executor: DronelinkCore.MissionExecutor)
  func onMissionEstimated(executor: DronelinkCore.MissionExecutor, estimate: DronelinkCore.MissionExecutor.Estimate)
  func onMissionEngaging(executor: DronelinkCore.MissionExecutor)
  func onMissionEngaged(executor: DronelinkCore.MissionExecutor, engagement: DronelinkCore.Executor.Engagement)
  func onMissionExecuted(executor: DronelinkCore.MissionExecutor, engagement: DronelinkCore.Executor.Engagement)
  func onMissionDisengaged(executor: DronelinkCore.MissionExecutor, engagement: DronelinkCore.Executor.Engagement, reason: DronelinkCore.Kernel.Message)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MissionExecutor : DronelinkCore.Executor {
  override public var id: Swift.String {
    get
  }
  final public let descriptors: DronelinkCore.Kernel.Descriptors
  final public let referenceCoordinate: DronelinkCore.Kernel.GeoCoordinate
  final public let takeoffCoordinate: DronelinkCore.Kernel.GeoCoordinate?
  final public let requiredTakeoffArea: (coordinate: DronelinkCore.Kernel.GeoCoordinate, distanceTolerance: DronelinkCore.Kernel.DistanceTolerance)?
  final public let elevationsRequired: Swift.Bool
  final public let altitudeContinuity: Swift.Bool
  final public let userInterfaceSettings: DronelinkCore.Kernel.UserInterfaceSettings?
  final public let reengagementRules: DronelinkCore.Kernel.PlanReengagementRules
  public var estimating: Swift.Bool {
    get
  }
  public var estimate: DronelinkCore.MissionExecutor.Estimate? {
    get
  }
  public var estimated: Swift.Bool {
    get
  }
  public var engaging: Swift.Bool {
    get
  }
  public var engagement: DronelinkCore.Executor.Engagement? {
    get
  }
  public var engaged: Swift.Bool {
    get
  }
  public func add(delegate: DronelinkCore.MissionExecutorDelegate)
  public func remove(delegate: DronelinkCore.MissionExecutorDelegate)
  public func estimate(droneSession: DronelinkCore.DroneSession? = nil, altitudeRequired: Swift.Bool = false, timeRequired: Swift.Bool = true)
  public func engageDisallowedReasons(droneSession: DronelinkCore.DroneSession) -> [DronelinkCore.Kernel.Message]?
  public func engage(droneSession: DronelinkCore.DroneSession, disallowed: @escaping (DronelinkCore.Kernel.Message) -> ()) throws
  override public func asDict(metadataOnly: Swift.Bool) -> [Swift.String : Any]
  @objc deinit
}
extension MissionExecutor {
  public func missionSerialized(complete: @escaping (Swift.String?) -> ())
  public var status: DronelinkCore.Kernel.ComponentExecutionStatus {
    get
  }
  public func componentExecutionDuration(componentID: Swift.String? = nil) -> Swift.Double
  public var assetManifestSerialized: Swift.String? {
    get
  }
  public var restrictionZones: [DronelinkCore.Kernel.PlanRestrictionZone]? {
    get
  }
  public func restrictionZoneBoundaryCoordinates(index: Swift.Int) -> [DronelinkCore.Kernel.GeoCoordinate]?
}
extension MissionExecutor {
  public class Estimate {
    final public let altitudeRequired: Swift.Bool
    final public let timeRequired: Swift.Bool
    final public let spatials: [DronelinkCore.Kernel.GeoSpatial]
    final public let time: Swift.Double
    final public let reengagementSpatials: [DronelinkCore.Kernel.GeoSpatial]?
    public init(altitudeRequired: Swift.Bool, timeRequired: Swift.Bool, spatials: [Any]?, time: Swift.Double, reengagementSpatials: [Any]?)
    @objc deinit
  }
}
public struct Kernel {
  public enum AltitudeSystem : Swift.String, Swift.Decodable {
    case atl
    case agl
    case msl
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraAEBCount : Swift.String, Swift.Decodable {
    case _3
    case _5
    case _7
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraBurstCount : Swift.String, Swift.Decodable {
    case _2
    case _3
    case _5
    case _7
    case _10
    case _14
    case continuous
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraAperture : Swift.String, Swift.Decodable {
    case f1dot6
    case f1dot7
    case f1dot8
    case f2
    case f2dot2
    case f2dot4
    case f2dot5
    case f2dot6
    case f2dot8
    case f3dot2
    case f3dot4
    case f3dot5
    case f4
    case f4dot5
    case f4dot8
    case f5
    case f5dot6
    case f6dot3
    case f6dot8
    case f7dot1
    case f8
    case f9
    case f9dot5
    case f9dot6
    case f10
    case f11
    case f13
    case f14
    case f16
    case f18
    case f19
    case f20
    case f22
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraColor : Swift.String, Swift.Decodable {
    case none
    case art
    case blackAndWhite
    case bright
    case dCinelike
    case portrait
    case m31
    case kDX
    case prismo
    case jugo
    case dLog
    case trueColor
    case inverse
    case reminiscence
    case solarize
    case posterize
    case whiteboard
    case blackboard
    case aqua
    case delta
    case dk79
    case vision4
    case vision6
    case trueColorExt
    case filmA
    case filmB
    case filmC
    case filmD
    case filmE
    case filmF
    case filmG
    case filmH
    case filmI
    case hlg
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraExposureCompensation : Swift.String, Swift.Decodable, Swift.CaseIterable {
    case n50
    case n47
    case n43
    case n40
    case n37
    case n33
    case n30
    case n27
    case n23
    case n20
    case n17
    case n13
    case n10
    case n07
    case n03
    case n00
    case p03
    case p07
    case p10
    case p13
    case p17
    case p20
    case p23
    case p27
    case p30
    case p33
    case p37
    case p40
    case p43
    case p47
    case p50
    case fixed
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [DronelinkCore.Kernel.CameraExposureCompensation]
    public static var allCases: [DronelinkCore.Kernel.CameraExposureCompensation] {
      get
    }
  }
  public enum CameraExposureMode : Swift.String, Swift.Decodable {
    case program
    case shutterPriority
    case aperturePriority
    case manual
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraFileIndexMode : Swift.String, Swift.Decodable {
    case reset
    case sequence
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraFocusMode : Swift.String, Swift.Decodable {
    case manual
    case auto
    case autoContinuous
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraISO : Swift.String, Swift.Decodable {
    case auto
    case _100
    case _200
    case _400
    case _800
    case _1600
    case _3200
    case _6400
    case _12800
    case _25600
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraMeteringMode : Swift.String, Swift.Decodable {
    case center
    case average
    case spot
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraMode : Swift.String, Swift.Decodable {
    case photo
    case video
    case playback
    case download
    case broadcast
    case unknown
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
  }
  public enum CameraPhotoAspectRatio : Swift.String, Swift.Decodable {
    case _4x3
    case _16x9
    case _3x2
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraPhotoFileFormat : Swift.String, Swift.Decodable {
    case raw
    case jpeg
    case rawAndJpeg
    case tiff14bit
    case radiometricJpeg
    case tiff14bitLinearLowTempResolution
    case tiff14bitLinearHighTempResolution
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraPhotoMode : Swift.String, Swift.Decodable {
    case single
    case hdr
    case burst
    case aeb
    case interval
    case timeLapse
    case rawBurst
    case shallowFocus
    case panorama
    case ehdr
    case hyperLight
    case highResolution
    case smart
    case internalAISpotChecking
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraShutterSpeed : Swift.String, Swift.Decodable {
    case _1_8000
    case _1_6400
    case _1_6000
    case _1_5000
    case _1_4000
    case _1_3200
    case _1_3000
    case _1_2500
    case _1_2000
    case _1_1600
    case _1_1500
    case _1_1250
    case _1_1000
    case _1_800
    case _1_750
    case _1_725
    case _1_640
    case _1_500
    case _1_400
    case _1_350
    case _1_320
    case _1_250
    case _1_240
    case _1_200
    case _1_180
    case _1_160
    case _1_125
    case _1_120
    case _1_100
    case _1_90
    case _1_80
    case _1_60
    case _1_50
    case _1_45
    case _1_40
    case _1_30
    case _1_25
    case _1_20
    case _1_15
    case _1_12dot5
    case _1_10
    case _1_8
    case _1_6dot25
    case _1_6
    case _1_5
    case _1_4
    case _1_3
    case _1_2dot5
    case _0dot3
    case _1_2
    case _1_1dot67
    case _1_1dot25
    case _0dot7
    case _1
    case _1dot3
    case _1dot4
    case _1dot6
    case _2
    case _2dot5
    case _3
    case _3dot2
    case _4
    case _5
    case _6
    case _7
    case _8
    case _9
    case _10
    case _11
    case _13
    case _15
    case _16
    case _20
    case _23
    case _25
    case _30
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraStorageLocation : Swift.String, Swift.Decodable {
    case sdCard
    case _internal
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraVideoFileCompressionStandard : Swift.String, Swift.Decodable {
    case h264
    case h265
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraVideoFileFormat : Swift.String, Swift.Decodable {
    case mov
    case mp4
    case tiffSequence
    case seq
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraVideoFieldOfView : Swift.String, Swift.Decodable {
    case _default
    case narrow
    case wide
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraVideoFrameRate : Swift.String, Swift.Decodable {
    case _23dot976
    case _24
    case _25
    case _29dot970
    case _30
    case _47dot950
    case _48
    case _50
    case _59dot940
    case _60
    case _90
    case _96
    case _100
    case _120
    case _8dot7
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraVideoMode : Swift.String, Swift.Decodable {
    case normal
    case hdr
    case slowMotion
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraVideoResolution : Swift.String, Swift.Decodable {
    case _336x256
    case _640x360
    case _640x480
    case _640x512
    case _1280x720
    case _1920x1080
    case _2048x1080
    case _2688x1512
    case _2704x1520
    case _2720x1530
    case _3712x2088
    case _3840x1572
    case _3840x2160
    case _3944x2088
    case _4096x2160
    case _4608x2160
    case _4608x2592
    case _5280x2160
    case _5280x2972
    case _5760x3240
    case _6016x3200
    case max
    case noSSDVideo
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraVideoStandard : Swift.String, Swift.Decodable {
    case pal
    case ntsc
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CameraWhiteBalancePreset : Swift.String, Swift.Decodable {
    case auto
    case sunny
    case cloudy
    case waterSurface
    case indoorIncandescent
    case indoorFluorescent
    case custom
    case neutral
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CommandType : Swift.String {
    case droneCollisionAvoidance
    case droneAutoLand
    case droneConnectionFailSafeBehavior
    case droneHomeLocation
    case droneLandingGearAutomaticMovement
    case droneLandingGearDeploy
    case droneLandingGearRetract
    case droneLandingProtection
    case droneLightbridgeChannel
    case droneLightbridgeChannelSelectionMode
    case droneLightbridgeFrequencyBand
    case droneLowBatteryWarningThreshold
    case droneMaxAltitude
    case droneMaxDistance
    case droneMaxDistanceLimitation
    case droneOcuSyncChannel
    case droneOcuSyncChannelSelectionMode
    case droneOcuSyncFrequencyBand
    case dronePrecisionLanding
    case droneReturnHomeObstacleAvoidance
    case droneReturnHomeAltitude
    case droneReturnHome
    case droneRemoteControllerSticks
    case droneReturnHomeRemoteObstacleAvoidance
    case droneSeriousLowBatteryWarningThreshold
    case droneSmartReturnHome
    case droneUpwardsAvoidance
    case droneVelocity
    case droneVisionAssistedPositioning
    case cameraAEBCount
    case cameraAperture
    case cameraAutoExposureLock
    case cameraAutoLockGimbal
    case cameraColor
    case cameraContrast
    case cameraExposureCompensation
    case cameraExposureCompensationStep
    case cameraExposureMode
    case cameraFileIndexMode
    case cameraFocus
    case cameraFocusMode
    case cameraISO
    case cameraMechanicalShutter
    case cameraMeteringMode
    case cameraMode
    case unitSystem
    case cameraPhotoAspectRatio
    case cameraPhotoFileFormat
    case cameraPhotoInterval
    case cameraPhotoMode
    case cameraSaturation
    case cameraSharpness
    case cameraShutterSpeed
    case cameraSpotMeteringTarget
    case cameraStartCapture
    case cameraStopCapture
    case cameraStorageLocation
    case cameraVideoCaption
    case cameraVideoFileCompressionStandard
    case cameraVideoFileFormat
    case cameraVideoMode
    case cameraVideoResolutionFrameRate
    case cameraVideoStandard
    case cameraWhiteBalanceCustom
    case cameraWhiteBalancePreset
    case gimbalMode
    case gimbalOrientation
    case gimbalVelocity
    case gimbalYawSimultaneousFollow
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CommandExecutionStatus : Swift.String, Swift.Decodable {
    case pending
    case queued
    case executing
    case succeeded
    case failed
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
  }
  public enum ComponentExecutionStatus : Swift.String, Swift.Decodable {
    case pending
    case executing
    case succeeded
    case failed
    public var completed: Swift.Bool {
      get
    }
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DroneConnectionFailSafeBehavior : Swift.String, Swift.Decodable {
    case hover
    case returnHome
    case autoLand
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DroneLightbridgeChannelSelectionMode : Swift.String, Swift.Decodable {
    case auto
    case manual
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DroneLightbridgeFrequencyBand : Swift.String, Swift.Decodable {
    case _2dot4ghz
    case _5dot7ghz
    case _5dot8ghz
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DroneOcuSyncChannelSelectionMode : Swift.String, Swift.Decodable {
    case auto
    case manual
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DroneOcuSyncFrequencyBand : Swift.String, Swift.Decodable {
    case _2dot4ghz
    case _5dot8ghz
    case dual
    case unknown
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum GimbalMode : Swift.String, Swift.Decodable {
    case free
    case fpv
    case yawFollow
    case unknown
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
  }
  public enum MessageLevel : Swift.String, Swift.Decodable {
    case info
    case warning
    case danger
    case error
    public func compare(to: DronelinkCore.Kernel.MessageLevel) -> Swift.Int
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum PlanCompleteAction : Swift.String, Swift.Decodable {
    case none
    case returnHome
    case autoLand
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum UnitSystem : Swift.String, Swift.Decodable {
    case metric
    case imperial
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum VariableValueType : Swift.String, Swift.Decodable {
    case null
    case boolean
    case number
    case string
    case drone
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ZoneShape : Swift.String, Swift.Decodable {
    case circle
    case polygon
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public struct Altitude : Swift.Decodable {
    public var value: Swift.Double
    public var system: DronelinkCore.Kernel.AltitudeSystem
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Descriptors : Swift.Decodable {
    public var name: Swift.String?
    public var description: Swift.String?
    public var tags: [Swift.String]?
    public init(name: Swift.String = "", description: Swift.String = "", tags: [Swift.String] = [])
    public var display: Swift.String {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
  public struct DistanceTolerance : Swift.Decodable {
    public var horizontal: Swift.Double
    public var vertical: Swift.Double
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Engagement : Swift.Decodable {
    public var executeIntervalTarget: Swift.Double
    public var executeIntervalMax: Swift.Double
    public var executeDelayStrikesMax: Swift.Int
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Func : Swift.Decodable {
    public var id: Swift.String
    public var coordinate: DronelinkCore.Kernel.GeoCoordinate
    public var descriptors: DronelinkCore.Kernel.Descriptors
    public var introImageUrl: Swift.String?
    public var dynamicInputs: Swift.String?
    public var userInterfaceSettings: DronelinkCore.Kernel.UserInterfaceSettings?
    public init(from decoder: Swift.Decoder) throws
  }
  public struct FuncInput : Swift.Decodable {
    public var descriptors: DronelinkCore.Kernel.Descriptors
    public var imageUrl: Swift.String?
    public var variable: DronelinkCore.Kernel.Variable
    public var optional: Swift.Bool
    public var enumValues: [Swift.String]?
    public var dynamic: Swift.Bool
    public var extensions: DronelinkCore.Kernel.FuncInputExtensions?
    public init(from decoder: Swift.Decoder) throws
  }
  public struct FuncInputExtensions : Swift.Decodable {
    public var droneOffsetsCoordinateReference: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct GeoCoordinate : Swift.Decodable {
    public var latitude: Swift.Double
    public var longitude: Swift.Double
    public var coordinate: CoreLocation.CLLocationCoordinate2D {
      get
    }
    public var location: CoreLocation.CLLocation {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
  public struct GeoSpatial : Swift.Decodable {
    public var coordinate: DronelinkCore.Kernel.GeoCoordinate
    public var altitude: DronelinkCore.Kernel.Altitude
    public var orientation: DronelinkCore.Kernel.Orientation3
    public var velocity: DronelinkCore.Kernel.Velocity6
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Message : Swift.Decodable {
    public var title: Swift.String
    public var details: Swift.String?
    public var level: DronelinkCore.Kernel.MessageLevel
    public init(title: Swift.String, details: Swift.String? = nil, level: DronelinkCore.Kernel.MessageLevel = MessageLevel.info)
    public init?(title: Swift.String, details: Swift.String? = nil, level: DronelinkCore.Kernel.MessageLevel?)
    public var display: Swift.String {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
  public struct MessageGroup : Swift.Decodable {
    public var descriptors: DronelinkCore.Kernel.Descriptors
    public var messages: [DronelinkCore.Kernel.Message]
    public init(descriptors: DronelinkCore.Kernel.Descriptors = Descriptors(), messages: [DronelinkCore.Kernel.Message] = [])
    public var display: Swift.String {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Mode : Swift.Decodable {
    public var id: Swift.String
    public var coordinate: DronelinkCore.Kernel.GeoCoordinate
    public var descriptors: DronelinkCore.Kernel.Descriptors
    public var userInterfaceSettings: DronelinkCore.Kernel.UserInterfaceSettings?
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ModeInput : Swift.Decodable {
    public var descriptors: DronelinkCore.Kernel.Descriptors
    public var imageUrl: Swift.String?
    public var variable: DronelinkCore.Kernel.Variable
    public var optional: Swift.Bool
    public var enumValues: [Swift.String]?
    public var dynamic: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Orientation3Optional : Swift.Decodable {
    public var x: Swift.Double?
    public var y: Swift.Double?
    public var z: Swift.Double?
    public var pitch: Swift.Double? {
      get
    }
    public var roll: Swift.Double? {
      get
    }
    public var yaw: Swift.Double? {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Orientation3 : Swift.Decodable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public init(x: Swift.Double = 0, y: Swift.Double = 0, z: Swift.Double = 0)
    public var pitch: Swift.Double {
      get
    }
    public var roll: Swift.Double {
      get
    }
    public var yaw: Swift.Double {
      get
    }
    public static func fromQuaternion(x: Swift.Double, y: Swift.Double, z: Swift.Double, w: Swift.Double) -> DronelinkCore.Kernel.Orientation3
    public init(from decoder: Swift.Decoder) throws
  }
  public struct PlanReengagementRules : Swift.Decodable {
    public var confirmationMessage: DronelinkCore.Kernel.Message?
    public var confirmationInstructionsImageUrl: Swift.String?
    public init(from decoder: Swift.Decoder) throws
  }
  public struct PlanRestrictionZone : Swift.Decodable {
    public var descriptors: DronelinkCore.Kernel.Descriptors
    public var zone: DronelinkCore.Kernel.Zone
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Point2 : Swift.Decodable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var vector2: DronelinkCore.Kernel.Vector2 {
      get
    }
    public var cgPoint: CoreGraphics.CGPoint {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
  public struct RemoteControllerStick : Swift.Decodable {
    public var x: Swift.Double
    public var y: Swift.Double
    public init(x: Swift.Double = 0, y: Swift.Double = 0)
    public init(from decoder: Swift.Decoder) throws
  }
  public struct RemoteControllerButton : Swift.Decodable {
    public var present: Swift.Bool
    public var pressed: Swift.Bool
    public init(present: Swift.Bool = false, pressed: Swift.Bool = false)
    public init(from decoder: Swift.Decoder) throws
  }
  public struct RemoteControllerWheel : Swift.Decodable {
    public var present: Swift.Bool
    public var pressed: Swift.Bool
    public var value: Swift.Double
    public init(present: Swift.Bool = false, pressed: Swift.Bool = false, value: Swift.Double = 0)
    public init(from decoder: Swift.Decoder) throws
  }
  public struct UserInterfaceSettings : Swift.Decodable {
    public var reticalImageUrl: Swift.String?
    public var droneOffsetsVisible: Swift.Bool?
    public var missionDetailsExpanded: Swift.Bool?
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Variable : Swift.Decodable {
    public var descriptors: DronelinkCore.Kernel.Descriptors
    public var valueType: DronelinkCore.Kernel.VariableValueType
    public var valueArray: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Vector2 : Swift.Decodable {
    public var direction: Swift.Double
    public var magnitude: Swift.Double
    public init(direction: Swift.Double = 0, magnitude: Swift.Double = 0)
    public var x: Swift.Double {
      get
    }
    public var y: Swift.Double {
      get
    }
    public func add(vector: DronelinkCore.Kernel.Vector2) -> DronelinkCore.Kernel.Vector2
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Velocity3 : Swift.Decodable {
    public var x: Swift.Double
    public var y: Swift.Double
    public var z: Swift.Double
    public var horizontal: DronelinkCore.Kernel.Vector2 {
      get
    }
    public var vertical: Swift.Double {
      get
    }
    public var pitch: Swift.Double {
      get
    }
    public var roll: Swift.Double {
      get
    }
    public var yaw: Swift.Double {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Velocity6 : Swift.Decodable {
    public var position: DronelinkCore.Kernel.Velocity3
    public var orientation: DronelinkCore.Kernel.Velocity3
    public var horizontal: DronelinkCore.Kernel.Vector2 {
      get
    }
    public var vertical: Swift.Double {
      get
    }
    public var rotational: Swift.Double {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Zone : Swift.Decodable {
    public var shape: DronelinkCore.Kernel.ZoneShape
    public var minAltitude: DronelinkCore.Kernel.Altitude
    public var maxAltitude: DronelinkCore.Kernel.Altitude
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Command {
  }
  public struct CommandExecutionState : Swift.Decodable, DronelinkCore.KernelIdentifiable {
    public var id: Swift.String
    public var status: DronelinkCore.Kernel.CommandExecutionStatus
    public var error: Swift.String?
    public init(id: Swift.String = "", status: DronelinkCore.Kernel.CommandExecutionStatus = .pending, error: Swift.String? = nil)
    public init(from decoder: Swift.Decoder) throws
  }
  public struct CollisionAvoidanceDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneFlightAssistantCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct AutoLandDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ConnectionFailSafeBehaviorDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var connectionFailSafeBehavior: DronelinkCore.Kernel.DroneConnectionFailSafeBehavior
    public init(from decoder: Swift.Decoder) throws
  }
  public struct HomeLocationDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var coordinate: DronelinkCore.Kernel.GeoCoordinate
    public init(from decoder: Swift.Decoder) throws
  }
  public struct LandingGearAutomaticMovementDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneLandingGearCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct LandingGearDeployDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneLandingGearCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var config: DronelinkCore.CommandConfig {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
  public struct LandingGearRetractDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneLandingGearCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public init(from decoder: Swift.Decoder) throws
  }
  public struct LandingProtectionDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneFlightAssistantCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct LightbridgeChannelDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneLightbridgeCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var lightbridgeChannel: Swift.Int
    public init(from decoder: Swift.Decoder) throws
  }
  public struct LightbridgeChannelSelectionModeDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneLightbridgeCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var lightbridgeChannelSelectionMode: DronelinkCore.Kernel.DroneLightbridgeChannelSelectionMode
    public init(from decoder: Swift.Decoder) throws
  }
  public struct LightbridgeFrequencyBandDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneLightbridgeCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var lightbridgeFrequencyBand: DronelinkCore.Kernel.DroneLightbridgeFrequencyBand
    public init(from decoder: Swift.Decoder) throws
  }
  public struct LowBatteryWarningThresholdDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var lowBatteryWarningThreshold: Swift.Double
    public init(from decoder: Swift.Decoder) throws
  }
  public struct MaxAltitudeDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var maxAltitude: Swift.Double
    public init(from decoder: Swift.Decoder) throws
  }
  public struct MaxDistanceDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var maxDistance: Swift.Double
    public init(from decoder: Swift.Decoder) throws
  }
  public struct MaxDistanceLimitationDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct OcuSyncChannelDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneOcuSyncCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var ocuSyncChannel: Swift.Int
    public init(from decoder: Swift.Decoder) throws
  }
  public struct OcuSyncChannelSelectionModeDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneOcuSyncCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var ocuSyncChannelSelectionMode: DronelinkCore.Kernel.DroneOcuSyncChannelSelectionMode
    public init(from decoder: Swift.Decoder) throws
  }
  public struct OcuSyncFrequencyBandDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneOcuSyncCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var ocuSyncFrequencyBand: DronelinkCore.Kernel.DroneOcuSyncFrequencyBand
    public init(from decoder: Swift.Decoder) throws
  }
  public struct PrecisionLandingDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneFlightAssistantCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct RemoteControllerSticksDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var leftStick: DronelinkCore.Kernel.RemoteControllerStick
    public var rightStick: DronelinkCore.Kernel.RemoteControllerStick
    public var heading: Swift.Double?
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ReturnHomeDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ReturnHomeAltitudeDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var returnHomeAltitude: Swift.Double
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ReturnHomeObstacleAvoidanceDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneFlightAssistantCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ReturnHomeRemoteObstacleAvoidanceDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneFlightAssistantCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct SeriousLowBatteryWarningThresholdDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var seriousLowBatteryWarningThreshold: Swift.Double
    public init(from decoder: Swift.Decoder) throws
  }
  public struct SmartReturnHomeDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct UpwardsAvoidanceDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand, DronelinkCore.KernelDroneFlightAssistantCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  @_hasMissingDesignatedInitializers public class VelocityDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var velocity: DronelinkCore.Kernel.Velocity6
    public var heading: Swift.Double?
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
  }
  public struct VisionAssistedPositioningDroneCommand : Swift.Decodable, DronelinkCore.KernelDroneCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct AEBCountCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var aebCount: DronelinkCore.Kernel.CameraAEBCount
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ApertureCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var aperture: DronelinkCore.Kernel.CameraAperture
    public init(from decoder: Swift.Decoder) throws
  }
  public struct AutoExposureLockCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct AutoLockGimbalCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ColorCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var color: DronelinkCore.Kernel.CameraColor
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ContrastCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var contrast: Swift.Int8
    public init(from decoder: Swift.Decoder) throws
  }
  public class ExposureCompensationCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var exposureCompensation: DronelinkCore.Kernel.CameraExposureCompensation
    public init(exposureCompensation: DronelinkCore.Kernel.CameraExposureCompensation)
    @objc deinit
    required public init(from decoder: Swift.Decoder) throws
  }
  public struct ExposureCompensationStepCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var exposureCompensationSteps: Swift.Int
    public init(exposureCompensationSteps: Swift.Int)
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ExposureModeCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var exposureMode: DronelinkCore.Kernel.CameraExposureMode
    public init(from decoder: Swift.Decoder) throws
  }
  public struct FileIndexModeCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var fileIndexMode: DronelinkCore.Kernel.CameraFileIndexMode
    public init(from decoder: Swift.Decoder) throws
  }
  public struct FocusCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var focusTarget: DronelinkCore.Kernel.Point2
    public init(from decoder: Swift.Decoder) throws
  }
  public struct FocusModeCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var focusMode: DronelinkCore.Kernel.CameraFocusMode
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ISOCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var iso: DronelinkCore.Kernel.CameraISO
    public init(from decoder: Swift.Decoder) throws
  }
  public struct MechanicalShutterCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct MeteringModeCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var meteringMode: DronelinkCore.Kernel.CameraMeteringMode
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ModeCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var mode: DronelinkCore.Kernel.CameraMode
    public init()
    public init(from decoder: Swift.Decoder) throws
  }
  public struct UnitSystemCommand : Swift.Decodable, DronelinkCore.KernelUnitSystemCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var unit: DronelinkCore.Kernel.UnitSystem
    public init()
    public init(from decoder: Swift.Decoder) throws
  }
  public struct PhotoAspectRatioCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var photoAspectRatio: DronelinkCore.Kernel.CameraPhotoAspectRatio
    public init(from decoder: Swift.Decoder) throws
  }
  public struct PhotoFileFormatCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var photoFileFormat: DronelinkCore.Kernel.CameraPhotoFileFormat
    public init(from decoder: Swift.Decoder) throws
  }
  public struct PhotoIntervalCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var photoInterval: Swift.Int
    public init(from decoder: Swift.Decoder) throws
  }
  public struct PhotoModeCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var photoMode: DronelinkCore.Kernel.CameraPhotoMode
    public init(from decoder: Swift.Decoder) throws
  }
  public struct SaturationCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var saturation: Swift.Int8
    public init(from decoder: Swift.Decoder) throws
  }
  public struct SharpnessCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var sharpness: Swift.Int8
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ShutterSpeedCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var shutterSpeed: DronelinkCore.Kernel.CameraShutterSpeed
    public init(from decoder: Swift.Decoder) throws
  }
  public struct SpotMeteringTargetCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var spotMeteringTarget: DronelinkCore.Kernel.Point2
    public init(from decoder: Swift.Decoder) throws
  }
  public struct StartCaptureCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public init()
    public init(from decoder: Swift.Decoder) throws
  }
  public struct StopCaptureCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public init()
    public init(from decoder: Swift.Decoder) throws
  }
  public struct StorageLocationCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var storageLocation: DronelinkCore.Kernel.CameraStorageLocation
    public init(from decoder: Swift.Decoder) throws
  }
  public struct VideoCaptionCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
  public struct VideoFileCompressionStandardCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var videoFileCompressionStandard: DronelinkCore.Kernel.CameraVideoFileCompressionStandard
    public init(from decoder: Swift.Decoder) throws
  }
  public struct VideoFileFormatCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var videoFileFormat: DronelinkCore.Kernel.CameraVideoFileFormat
    public init(from decoder: Swift.Decoder) throws
  }
  public struct VideoModeCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var videoMode: DronelinkCore.Kernel.CameraVideoMode
    public init(from decoder: Swift.Decoder) throws
  }
  public struct VideoResolutionFrameRateCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var videoResolution: DronelinkCore.Kernel.CameraVideoResolution
    public var videoFrameRate: DronelinkCore.Kernel.CameraVideoFrameRate
    public var videoFieldOfView: DronelinkCore.Kernel.CameraVideoFieldOfView
    public init(from decoder: Swift.Decoder) throws
  }
  public struct VideoStandardCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var videoStandard: DronelinkCore.Kernel.CameraVideoStandard
    public init(from decoder: Swift.Decoder) throws
  }
  public struct WhiteBalanceCustomCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var whiteBalanceCustom: Swift.UInt
    public init(from decoder: Swift.Decoder) throws
  }
  public struct WhiteBalancePresetCameraCommand : Swift.Decodable, DronelinkCore.KernelCameraCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var whiteBalancePreset: DronelinkCore.Kernel.CameraWhiteBalancePreset
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ModeGimbalCommand : Swift.Decodable, DronelinkCore.KernelGimbalCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var mode: DronelinkCore.Kernel.GimbalMode
    public init(from decoder: Swift.Decoder) throws
  }
  public struct OrientationGimbalCommand : Swift.Decodable, DronelinkCore.KernelGimbalCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var orientation: DronelinkCore.Kernel.Orientation3Optional
    public init()
    public init(from decoder: Swift.Decoder) throws
  }
  public struct VelocityGimbalCommand : Swift.Decodable, DronelinkCore.KernelGimbalCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var velocity: DronelinkCore.Kernel.Velocity3
    public init(from decoder: Swift.Decoder) throws
  }
  public struct YawSimultaneousFollowGimbalCommand : Swift.Decodable, DronelinkCore.KernelGimbalCommand {
    public var type: DronelinkCore.Kernel.CommandType {
      get
    }
    public var id: Swift.String
    public var channel: Swift.UInt
    public var enabled: Swift.Bool
    public init(from decoder: Swift.Decoder) throws
  }
}
public protocol KernelIdentifiable {
  var id: Swift.String { get }
}
public protocol KernelCommand : DronelinkCore.KernelIdentifiable {
  var type: DronelinkCore.Kernel.CommandType { get }
  var config: DronelinkCore.CommandConfig { get }
}
extension KernelCommand {
  public var config: DronelinkCore.CommandConfig {
    get
  }
}
public protocol KernelDroneCommand : DronelinkCore.KernelCommand {
}
public protocol KernelDroneFlightAssistantCommand : DronelinkCore.KernelCommand {
}
public protocol KernelDroneLandingGearCommand : DronelinkCore.KernelCommand {
}
public protocol KernelDroneLightbridgeCommand : DronelinkCore.KernelCommand {
}
public protocol KernelDroneOcuSyncCommand : DronelinkCore.KernelCommand {
}
public protocol KernelPayloadCommand : DronelinkCore.KernelCommand {
  var channel: Swift.UInt { get }
}
public protocol KernelCameraCommand : DronelinkCore.KernelPayloadCommand {
}
public protocol KernelUnitSystemCommand : DronelinkCore.KernelPayloadCommand {
}
public protocol KernelGimbalCommand : DronelinkCore.KernelPayloadCommand {
}
extension Float {
  public var convertDegreesToRadians: Swift.Float {
    get
  }
  public var convertRadiansToDegrees: Swift.Float {
    get
  }
}
extension Double {
  public var convertDegreesToRadians: Swift.Double {
    get
  }
  public var convertRadiansToDegrees: Swift.Double {
    get
  }
  public var convertMetersToFeet: Swift.Double {
    get
  }
  public var convertFeetToMeters: Swift.Double {
    get
  }
  public var convertMetersPerSecondToMilesPerHour: Swift.Double {
    get
  }
  public var convertMetersPerSecondToKilometersPerHour: Swift.Double {
    get
  }
  public func rounded(toPlaces places: Swift.Int) -> Swift.Double
  public func angleDifferenceSigned(angle: Swift.Double) -> Swift.Double
}
extension CLLocationCoordinate2D {
  public func coordinate(bearing: Swift.Double, distance: Swift.Double) -> CoreLocation.CLLocationCoordinate2D
  public func bearing(to: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
  public func distance(to: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
  public var asDict: [Swift.String : Any] {
    get
  }
}
extension String : Swift.Error {
  public var errorDescription: Swift.String? {
    get
  }
}
extension Array {
  public subscript(safeIndex index: Swift.Int) -> Element? {
    get
  }
}
extension CaseIterable where Self : Swift.Equatable {
  public var previous: Self {
    get
  }
  public var next: Self {
    get
  }
  public func offset(steps: Swift.Int) -> Self
}
extension DronelinkCore.DronelinkError : Swift.Equatable {}
extension DronelinkCore.DronelinkError : Swift.Hashable {}
extension DronelinkCore.NetworkRTKStatus : Swift.Equatable {}
extension DronelinkCore.NetworkRTKStatus : Swift.Hashable {}
extension DronelinkCore.NetworkRTKStatus : Swift.RawRepresentable {}
extension DronelinkCore.DroneSessionError : Swift.Equatable {}
extension DronelinkCore.DroneSessionError : Swift.Hashable {}
extension DronelinkCore.Kernel.AltitudeSystem : Swift.Equatable {}
extension DronelinkCore.Kernel.AltitudeSystem : Swift.Hashable {}
extension DronelinkCore.Kernel.AltitudeSystem : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraAEBCount : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraAEBCount : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraAEBCount : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraBurstCount : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraBurstCount : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraBurstCount : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraAperture : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraAperture : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraAperture : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraColor : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraColor : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraColor : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraExposureCompensation : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraExposureCompensation : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraExposureCompensation : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraExposureMode : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraExposureMode : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraExposureMode : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraFileIndexMode : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraFileIndexMode : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraFileIndexMode : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraFocusMode : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraFocusMode : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraFocusMode : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraISO : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraISO : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraISO : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraMeteringMode : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraMeteringMode : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraMeteringMode : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraMode : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraMode : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraMode : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraPhotoAspectRatio : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraPhotoAspectRatio : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraPhotoAspectRatio : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraPhotoFileFormat : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraPhotoFileFormat : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraPhotoFileFormat : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraPhotoMode : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraPhotoMode : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraPhotoMode : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraShutterSpeed : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraShutterSpeed : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraShutterSpeed : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraStorageLocation : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraStorageLocation : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraStorageLocation : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraVideoFileCompressionStandard : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraVideoFileCompressionStandard : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraVideoFileCompressionStandard : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraVideoFileFormat : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraVideoFileFormat : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraVideoFileFormat : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraVideoFieldOfView : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraVideoFieldOfView : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraVideoFieldOfView : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraVideoFrameRate : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraVideoFrameRate : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraVideoFrameRate : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraVideoMode : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraVideoMode : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraVideoMode : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraVideoResolution : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraVideoResolution : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraVideoResolution : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraVideoStandard : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraVideoStandard : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraVideoStandard : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CameraWhiteBalancePreset : Swift.Equatable {}
extension DronelinkCore.Kernel.CameraWhiteBalancePreset : Swift.Hashable {}
extension DronelinkCore.Kernel.CameraWhiteBalancePreset : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CommandType : Swift.Equatable {}
extension DronelinkCore.Kernel.CommandType : Swift.Hashable {}
extension DronelinkCore.Kernel.CommandType : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.CommandExecutionStatus : Swift.Equatable {}
extension DronelinkCore.Kernel.CommandExecutionStatus : Swift.Hashable {}
extension DronelinkCore.Kernel.CommandExecutionStatus : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.ComponentExecutionStatus : Swift.Equatable {}
extension DronelinkCore.Kernel.ComponentExecutionStatus : Swift.Hashable {}
extension DronelinkCore.Kernel.ComponentExecutionStatus : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.DroneConnectionFailSafeBehavior : Swift.Equatable {}
extension DronelinkCore.Kernel.DroneConnectionFailSafeBehavior : Swift.Hashable {}
extension DronelinkCore.Kernel.DroneConnectionFailSafeBehavior : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.DroneLightbridgeChannelSelectionMode : Swift.Equatable {}
extension DronelinkCore.Kernel.DroneLightbridgeChannelSelectionMode : Swift.Hashable {}
extension DronelinkCore.Kernel.DroneLightbridgeChannelSelectionMode : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.DroneLightbridgeFrequencyBand : Swift.Equatable {}
extension DronelinkCore.Kernel.DroneLightbridgeFrequencyBand : Swift.Hashable {}
extension DronelinkCore.Kernel.DroneLightbridgeFrequencyBand : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.DroneOcuSyncChannelSelectionMode : Swift.Equatable {}
extension DronelinkCore.Kernel.DroneOcuSyncChannelSelectionMode : Swift.Hashable {}
extension DronelinkCore.Kernel.DroneOcuSyncChannelSelectionMode : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.DroneOcuSyncFrequencyBand : Swift.Equatable {}
extension DronelinkCore.Kernel.DroneOcuSyncFrequencyBand : Swift.Hashable {}
extension DronelinkCore.Kernel.DroneOcuSyncFrequencyBand : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.GimbalMode : Swift.Equatable {}
extension DronelinkCore.Kernel.GimbalMode : Swift.Hashable {}
extension DronelinkCore.Kernel.GimbalMode : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.MessageLevel : Swift.Equatable {}
extension DronelinkCore.Kernel.MessageLevel : Swift.Hashable {}
extension DronelinkCore.Kernel.MessageLevel : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.PlanCompleteAction : Swift.Equatable {}
extension DronelinkCore.Kernel.PlanCompleteAction : Swift.Hashable {}
extension DronelinkCore.Kernel.PlanCompleteAction : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.UnitSystem : Swift.Equatable {}
extension DronelinkCore.Kernel.UnitSystem : Swift.Hashable {}
extension DronelinkCore.Kernel.UnitSystem : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.VariableValueType : Swift.Equatable {}
extension DronelinkCore.Kernel.VariableValueType : Swift.Hashable {}
extension DronelinkCore.Kernel.VariableValueType : Swift.RawRepresentable {}
extension DronelinkCore.Kernel.ZoneShape : Swift.Equatable {}
extension DronelinkCore.Kernel.ZoneShape : Swift.Hashable {}
extension DronelinkCore.Kernel.ZoneShape : Swift.RawRepresentable {}
